#!/usr/bin/python

# To execute this file, for example, run:
# python3 panoptic_to_kitti.py -i /mnt/fcav/datasets/panoptic/ -o /mnt/fcav/projects/bodypose2dsim/ -s 160422_ultimatum1 -rb 1 -re 29278 -t train -n 0
# python3 panoptic_to_kitti.py -i input_path_to_panoptic_sequence_parent_dir -o output_path_for_orientnet -s sequence_name -rb frame_begin -re frame_end -t for_test_or_train -n sequence_unique_number

import os
import argparse
import gen_kitti_gplane_info
import gen_kitti_cam_calib_info
import gen_kitti_label_info
import gen_kitti_txts
import gen_kitti_val_txt


parser = argparse.ArgumentParser("Specify a sequence to work with.")
# Dataset path: /home/trinhle/panoptic-toolbox/, /mnt/fcav/datasets/panoptic/
parser.add_argument("-i", "--input", help="Specify input path", type=str, required=True)
# Sequence output path: /home/trinhle/panoptic-toolbox/, /mnt/fcav/projects/bodypose2dsim/
parser.add_argument("-o", "--output", help="Specify output path", type=str, required=True)
# Sequence name: 160422_haggling1,  160422_ultimatum1
parser.add_argument("-s", "--seq", help="Specify sequence name", type=str, required=True)
# Sequence length in terms of no of images in kinectImgs
parser.add_argument("-rb", "--rbegin", help="Specify Kinect image frame number to start", type=int, required=True)
parser.add_argument("-re", "--rend", help="Specify Kinect image frame number to end", type=int, required=True)


# Test/Validation or training set
parser.add_argument("-t", "--type", help="Specify 'train' or 'test' dataset", type=str, required=True)
# Unique number (up to 2 digits) to distinguish samples from different sequences.
# This will be part of sample filename.
parser.add_argument("-n", "--num",
                    help="Specify unique number (up to 2 digits) to distinguish sequences. This will be part of sample filename.",
                    type=int, choices=range(0, 100), required=True)

args = parser.parse_args()

pan_3dpose_path = args.input + args.seq + '/hdPose3d_stage1_coco19/'
processed_kinect_img_path = args.output + args.seq + '/training/rgb_images/'

kitti_label2_path = args.output + args.seq + '/training/label_2/'
kitti_planes_path = args.output + args.seq + '/training/planes/'
kitti_calib_path = args.output + args.seq + '/training/calib/'

idk = 1 # 1 for kinect
kinect_img_indices = range(args.rbegin, args.rend + 1)


def main():

    if args.type not in ['train', 'test']:
        print("Invalid dataset type. --type/-t argument should be train or test.")
        return

    # Generate ground plane info
    if not os.path.exists(kitti_planes_path):
        os.mkdir(kitti_planes_path)
    gen_kitti_gplane_info.gen_gplane_info(args.input, kitti_planes_path, args.seq, idk, args.num, kinect_img_indices)

    print("planes generated successfully.")

    # Generate camera calibration info
    if not os.path.exists(kitti_calib_path):
        os.mkdir(kitti_calib_path)
    gen_kitti_cam_calib_info.gen_cam_calib_info(args.input, kitti_calib_path, args.seq, idk, args.num, kinect_img_indices)

    print("calib generated successfully.")

    # Generate ground truth labels
    if not os.path.exists(kitti_label2_path):
        os.mkdir(kitti_label2_path)
    gen_kitti_label_info.gen_label_info(args.input, kitti_label2_path, args.seq, idk, args.num, pan_3dpose_path)

    print("label_2 generated successfully.")

    if args.type == 'train':
        # Generate trainval, train, and val.txt based on no. of images available in /rgb_images folder (generated by matlab)
        gen_kitti_txts.gen_txts(kitti_label2_path, processed_kinect_img_path,
                                args.output, args.seq)
        print("trainval, train, val txts generated successfully.")
    else:
        # Generate val.txt only based on no. of files in label_2 folder
        gen_kitti_val_txt.gen_val_txt(kitti_label2_path, processed_kinect_img_path, args.output, args.seq)
        print("trainval, train (empty), val txts generated successfully.")


if __name__ == "__main__":
    main()
